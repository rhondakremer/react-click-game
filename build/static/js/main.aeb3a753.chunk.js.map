{"version":3,"sources":["components/Header/index.js","components/Wrapper/index.js","components/CardWrapper.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","score","highScore","Wrapper","children","CardWrapper","PuppyCard","alt","name","src","image","onClick","id","clicked","App","state","puppies","clickEvent","puppyClicked","shufflePuppies","setState","map","puppy","updateScore","gameOver","checkHighScore","randomizeArray","arr","sort","a","b","Math","floor","random","alert","restartGame","console","log","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0zDAWeA,MARf,SAAgBC,GACd,OAAQ,6BACJ,wBAAIC,UAAU,uBAAd,qBACA,iGACJ,qCAAWD,EAAME,MAAjB,gBAAqCF,EAAMG,a,MCA9BC,MAJf,SAAiBJ,GACf,OAAO,yBAAKC,UAAU,2BAA2BD,EAAMK,WCG1CC,MAJf,SAAqBN,GACnB,OAAO,yBAAKC,UAAU,eAAeD,EAAMK,WCO5BE,EARC,SAACP,GAAD,OACZ,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKO,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,MAAOC,QAAS,kBAAMZ,EAAMY,QAAQZ,EAAMa,KAAKC,QAASd,EAAMc,a,OCwF1FC,G,iNApFbC,MAAQ,CACNC,QAASA,EACTf,MAAO,EACPC,UAAW,G,EAGbe,WAAa,SAACL,GAEZ,EAAKM,aAAaN,GAClB,EAAKO,kB,EAGPD,aAAe,SAACN,GACd,EAAKQ,SAAS,CACZJ,QAAQA,EAAQK,KAAI,SAAAC,GAUlB,OATIA,EAAMV,KAAOA,GAAwB,UAAlBU,EAAMT,SAC3BS,EAAMT,QAAU,OAEhB,EAAKU,eAGED,EAAMV,KAAKA,GAAwB,SAAlBU,EAAMT,SAC9B,EAAKW,WAEAF,Q,EAKbC,YAAc,WAEZ,EAAKH,SAAS,CAACnB,MAAO,EAAKc,MAAMd,MAAQ,IAAI,kBAC7C,EAAKwB,qB,EAGPC,eAAiB,SAACC,GAChB,OAAOA,EAAIC,MAAK,SAACC,EAAEC,GAAH,OAAOC,KAAKC,MAAoB,IAAdD,KAAKE,UAAe,IAAI,GAAG,M,EAG/DR,eAAiB,WACX,EAAKV,MAAMd,MAAQ,EAAKc,MAAMb,WAChC,EAAKkB,SAAS,CAAClB,UAAW,EAAKa,MAAMd,QAEd,KAArB,EAAKc,MAAMd,QACbiC,MAAM,YACN,EAAKC,gB,EAIThB,eAAiB,WACf,EAAKC,SAAS,CAAEJ,QAAS,EAAKU,eAAe,EAAKX,MAAMC,WACpDoB,QAAQC,IAAI,mB,EAGlBb,SAAW,WAETU,MAAM,qBACN,EAAKC,e,EAGPA,YAAc,WACZ,EAAKf,SAAS,CAACnB,MAAM,EAAGe,QAAQA,EAAQK,KAAI,SAAAC,GAAK,OAAIA,EAAMT,QAAQ,c,wEAG3D,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQZ,MAAOqC,KAAKvB,MAAMd,MAAOC,UAAWoC,KAAKvB,MAAMb,YACvD,kBAAC,EAAD,KACCc,EAAQK,KAAI,SAAAC,GAAK,OAChB,kBAAC,EAAD,CACEV,GAAIU,EAAMV,GACV2B,IAAKjB,EAAMV,GACXF,MAAOY,EAAMZ,MACbG,QAASS,EAAMT,QACfF,QAAS,EAAKM,sB,GA7ERuB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aeb3a753.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return  <div>\n      <h1 className=\"header-title col-12\">Puppy Click Game!</h1>\n      <h5>Click a puppy to start. But don't click any puppy more than once!</h5>\n  <p>Score: {props.score} High Score: {props.highScore}</p>\n  </div>\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper col-10 offset-1\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n// import \"./style.css\";\n\nfunction CardWrapper(props) {\n  return <div className=\"cardWrapper\">{props.children}</div>;\n}\n\nexport default CardWrapper;\n","import React from \"react\";\n\n\nconst PuppyCard = (props) => (\n      <div className=\"card\">\n        <div className=\"img-container\">\n          <img alt={props.name} src={props.image} onClick={() => props.onClick(props.id)} clicked={props.clicked}/>\n        </div>\n      </div>\n    );\n  \n  export default PuppyCard;\n  ","import React, { Component } from \"react\";\nimport Header from \"./components/Header\"\nimport Wrapper from \"./components/Wrapper/\";\nimport CardWrapper from \"./components/CardWrapper\";\nimport PuppyCard from \"./components/Card\";\nimport puppies from \"./cards.json\";\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    puppies: puppies,\n    score: 0,\n    highScore: 0\n  };\n\n  clickEvent = (id) => {\n    //alert(\"this is the click event\");\n    this.puppyClicked(id);\n    this.shufflePuppies();\n  }\n\n  puppyClicked = (id) => {\n    this.setState({\n      puppies:puppies.map(puppy => {\n        if (puppy.id === id && puppy.clicked === \"false\") {\n          puppy.clicked = \"true\";\n          //alert(\"you clicked this puppy\");\n          this.updateScore();\n          //this.randomizeArray(puppies)\n        }\n        else if (puppy.id===id && puppy.clicked === \"true\") {\n          this.gameOver();\n        }\n        return puppy;\n      }) \n    });\n  };\n\n  updateScore = () => {\n    // set the new score\n    this.setState({score: this.state.score + 1}, () =>\n    this.checkHighScore());\n  }\n\n  randomizeArray = (arr) => {\n    return arr.sort((a,b)=>Math.floor(Math.random()*1000)>500?1:-1);\n  }\n\n  checkHighScore = () => {\n    if (this.state.score > this.state.highScore) {\n      this.setState({highScore: this.state.score});\n    }\n    if (this.state.score === 12) {\n      alert(\"You win!\")\n      this.restartGame();\n    }\n  }\n\n  shufflePuppies = () => {\n    this.setState({ puppies: this.randomizeArray(this.state.puppies)});\n        console.log(\"Shuffling Pups\");\n  }\n\n  gameOver = () => {\n    // reset all puppy clicked to false and score is 0\n    alert(\"game over, loser!\")\n    this.restartGame();\n  }\n\n  restartGame = () => {\n    this.setState({score:0, puppies:puppies.map(puppy => puppy.clicked=\"false\")});\n  }\n  // Map over this.state.puppies and render a PuppyCard component for each puppy object\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highScore={this.state.highScore} />\n        <CardWrapper>\n        {puppies.map(puppy => (\n          <PuppyCard\n            id={puppy.id}\n            key={puppy.id}\n            image={puppy.image}\n            clicked={puppy.clicked}\n            onClick={this.clickEvent}\n          />\n        ))}\n      </CardWrapper>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}